import '../models/product.dart';
import '../models/inventory.dart';
import '../models/warehouse.dart';
import '../models/sales.dart';
import '../models/financial.dart';
import '../models/customer.dart';
import '../models/worker.dart';
import '../models/category.dart';
import '../models/store.dart';
import '../models/system_parameter.dart';
import '../models/integration.dart';

class MockDataService {
  // Método para obtener datos mock de categorías
  static List<Category> getMockCategories() {
    return [
      Category(
        id: '1',
        name: 'Bebidas',
        description: 'Bebidas refrescantes y alcohólicas',
        level: 1,
        color: '#FF6B35',
        icon: 'local_drink',
        productCount: 45,
        createdAt: DateTime(2023, 1, 15),
        tags: ['bebidas', 'refrescos', 'alcohol'],
        commission: 8.5,
        sortOrder: 1,
      ),
      Category(
        id: '2',
        name: 'Gaseosas',
        description: 'Bebidas gaseosas y refrescos',
        parentId: '1',
        parentName: 'Bebidas',
        level: 2,
        color: '#FF6B35',
        icon: 'local_drink',
        productCount: 25,
        createdAt: DateTime(2023, 1, 16),
        tags: ['gaseosas', 'coca cola', 'pepsi'],
        commission: 8.5,
        sortOrder: 1,
      ),
      Category(
        id: '3',
        name: 'Alimentos',
        description: 'Productos alimenticios diversos',
        level: 1,
        color: '#10B981',
        icon: 'restaurant',
        productCount: 78,
        createdAt: DateTime(2023, 1, 20),
        tags: ['comida', 'snacks', 'conservas'],
        commission: 12.0,
        sortOrder: 2,
      ),
      Category(
        id: '4',
        name: 'Snacks',
        description: 'Aperitivos y botanas',
        parentId: '3',
        parentName: 'Alimentos',
        level: 2,
        color: '#10B981',
        icon: 'fastfood',
        productCount: 32,
        createdAt: DateTime(2023, 1, 21),
        tags: ['papas', 'galletas', 'dulces'],
        commission: 12.0,
        sortOrder: 1,
      ),
      Category(
        id: '5',
        name: 'Electrónicos',
        description: 'Dispositivos y accesorios electrónicos',
        level: 1,
        color: '#6366F1',
        icon: 'devices',
        productCount: 23,
        createdAt: DateTime(2023, 2, 1),
        tags: ['tecnología', 'gadgets', 'accesorios'],
        commission: 15.0,
        sortOrder: 3,
      ),
      Category(
        id: '6',
        name: 'Hogar',
        description: 'Artículos para el hogar y limpieza',
        level: 1,
        color: '#8B5CF6',
        icon: 'home',
        productCount: 56,
        createdAt: DateTime(2023, 2, 5),
        tags: ['limpieza', 'decoración', 'utensilios'],
        commission: 10.0,
        sortOrder: 4,
      ),
      Category(
        id: '7',
        name: 'Limpieza',
        description: 'Productos de limpieza y desinfección',
        parentId: '6',
        parentName: 'Hogar',
        level: 2,
        color: '#8B5CF6',
        icon: 'cleaning_services',
        productCount: 28,
        createdAt: DateTime(2023, 2, 6),
        tags: ['detergente', 'desinfectante', 'jabón'],
        commission: 10.0,
        sortOrder: 1,
      ),
      Category(
        id: '8',
        name: 'Cuidado Personal',
        description: 'Productos de higiene y cuidado personal',
        level: 1,
        color: '#EC4899',
        icon: 'face',
        productCount: 34,
        createdAt: DateTime(2023, 2, 10),
        tags: ['higiene', 'cosmética', 'salud'],
        commission: 18.0,
        sortOrder: 5,
      ),
    ];
  }

  // Método para obtener datos mock de trabajadores
  static List<Worker> getMockWorkers() {
    return [
      Worker(
        id: '1',
        name: 'Ana García',
        email: 'ana.garcia@ventiq.com',
        phone: '+1234567890',
        position: 'Gerente General',
        role: 'admin',
        department: 'Administración',
        hireDate: DateTime(2022, 1, 15),
        salary: 3500.0,
        isActive: true,
        permissions: ['all'],
        storeId: 'store1',
        storeName: 'VentIQ Central',
        workSchedule: 'Lunes a Viernes 8:00-17:00',
      ),
      Worker(
        id: '2',
        name: 'Carlos López',
        email: 'carlos.lopez@ventiq.com',
        phone: '+1234567891',
        position: 'Vendedor Senior',
        role: 'seller',
        department: 'Ventas',
        hireDate: DateTime(2022, 6, 10),
        salary: 2200.0,
        isActive: true,
        permissions: ['sales', 'customers'],
        storeId: 'store1',
        storeName: 'VentIQ Central',
        workSchedule: 'Lunes a Sábado 9:00-18:00',
      ),
      Worker(
        id: '3',
        name: 'María Rodríguez',
        email: 'maria.rodriguez@ventiq.com',
        phone: '+1234567892',
        position: 'Supervisora de Operaciones',
        role: 'manager',
        department: 'Operaciones',
        hireDate: DateTime(2021, 8, 20),
        salary: 2800.0,
        isActive: true,
        permissions: ['inventory', 'sales', 'reports'],
        storeId: 'store1',
        storeName: 'VentIQ Central',
        workSchedule: 'Lunes a Viernes 8:00-17:00',
      ),
      Worker(
        id: '4',
        name: 'José Martínez',
        email: 'jose.martinez@ventiq.com',
        phone: '+1234567893',
        position: 'Cajero',
        role: 'seller',
        department: 'Ventas',
        hireDate: DateTime(2023, 2, 5),
        salary: 1800.0,
        isActive: true,
        permissions: ['sales'],
        storeId: 'store1',
        storeName: 'VentIQ Central',
        workSchedule: 'Lunes a Sábado 14:00-22:00',
      ),
      Worker(
        id: '5',
        name: 'Laura Fernández',
        email: 'laura.fernandez@ventiq.com',
        phone: '+1234567894',
        position: 'Contadora',
        role: 'manager',
        department: 'Finanzas',
        hireDate: DateTime(2022, 11, 12),
        salary: 3000.0,
        isActive: false,
        permissions: ['financial', 'reports'],
        storeId: 'store1',
        storeName: 'VentIQ Central',
        workSchedule: 'Lunes a Viernes 8:00-16:00',
      ),
    ];
  }

  // Productos Mock
  static List<Product> getMockProducts() {
    return [
      Product(
        id: '1',
        name: 'Coca Cola',
        description: 'Bebida gaseosa refrescante',
        categoryId: 'cat1',
        categoryName: 'Bebidas',
        brand: 'Coca Cola Company',
        sku: 'CC001',
        barcode: '7501055300001',
        basePrice: 2.50,
        imageUrl: 'https://images.unsplash.com/photo-1554866585-cd94860890b7?w=400',
        createdAt: DateTime.now().subtract(const Duration(days: 30)),
        updatedAt: DateTime.now(),
        variants: [
          ProductVariant(
            id: 'v1',
            productId: '1',
            name: 'Coca Cola 350ml',
            presentation: '350ml',
            price: 2.50,
            sku: 'CC001-350',
            barcode: '7501055300001',
          ),
          ProductVariant(
            id: 'v2',
            productId: '1',
            name: 'Coca Cola 500ml',
            presentation: '500ml',
            price: 3.00,
            sku: 'CC001-500',
            barcode: '7501055300002',
          ),
          ProductVariant(
            id: 'v3',
            productId: '1',
            name: 'Coca Cola 1L',
            presentation: '1L',
            price: 4.50,
            sku: 'CC001-1L',
            barcode: '7501055300003',
          ),
        ],
      ),
      Product(
        id: '2',
        name: 'Pan Integral',
        description: 'Pan de molde integral nutritivo',
        categoryId: 'cat2',
        categoryName: 'Panadería',
        brand: 'Bimbo',
        sku: 'BI002',
        barcode: '7501030400002',
        basePrice: 3.25,
        imageUrl: 'https://images.unsplash.com/photo-1509440159596-0249088772ff?w=400',
        createdAt: DateTime.now().subtract(const Duration(days: 25)),
        updatedAt: DateTime.now(),
        variants: [
          ProductVariant(
            id: 'v4',
            productId: '2',
            name: 'Pan Integral 680g',
            presentation: '680g',
            price: 3.25,
            sku: 'BI002-680',
            barcode: '7501030400002',
          ),
        ],
      ),
      Product(
        id: '3',
        name: 'Leche Entera',
        description: 'Leche fresca pasteurizada',
        categoryId: 'cat3',
        categoryName: 'Lácteos',
        brand: 'Alpura',
        sku: 'AL003',
        barcode: '7501234567890',
        basePrice: 2.80,
        imageUrl: 'https://images.unsplash.com/photo-1550583724-b2692b85b150?w=400',
        createdAt: DateTime.now().subtract(const Duration(days: 20)),
        updatedAt: DateTime.now(),
        variants: [
          ProductVariant(
            id: 'v5',
            productId: '3',
            name: 'Leche Entera 1L',
            presentation: '1L',
            price: 2.80,
            sku: 'AL003-1L',
            barcode: '7501234567890',
          ),
          ProductVariant(
            id: 'v6',
            productId: '3',
            name: 'Leche Entera 500ml',
            presentation: '500ml',
            price: 1.60,
            sku: 'AL003-500',
            barcode: '7501234567891',
          ),
        ],
      ),
      Product(
        id: '4',
        name: 'Arroz Blanco',
        description: 'Arroz grano largo premium',
        categoryId: 'cat4',
        categoryName: 'Granos',
        brand: 'Verde Valle',
        sku: 'VV004',
        barcode: '7501987654321',
        basePrice: 4.75,
        imageUrl: 'https://images.unsplash.com/photo-1586201375761-83865001e31c?w=400',
        createdAt: DateTime.now().subtract(const Duration(days: 15)),
        updatedAt: DateTime.now(),
        variants: [
          ProductVariant(
            id: 'v7',
            productId: '4',
            name: 'Arroz Blanco 1kg',
            presentation: '1kg',
            price: 4.75,
            sku: 'VV004-1K',
            barcode: '7501987654321',
          ),
          ProductVariant(
            id: 'v8',
            productId: '4',
            name: 'Arroz Blanco 5kg',
            presentation: '5kg',
            price: 20.00,
            sku: 'VV004-5K',
            barcode: '7501987654322',
          ),
        ],
      ),
      Product(
        id: '5',
        name: 'Aceite de Girasol',
        description: 'Aceite vegetal para cocinar',
        categoryId: 'cat5',
        categoryName: 'Aceites',
        brand: 'Capullo',
        sku: 'CP005',
        barcode: '7501122334455',
        basePrice: 6.50,
        imageUrl: 'https://images.unsplash.com/photo-1474979266404-7eaacbcd87c5?w=400',
        createdAt: DateTime.now().subtract(const Duration(days: 10)),
        updatedAt: DateTime.now(),
        variants: [
          ProductVariant(
            id: 'v9',
            productId: '5',
            name: 'Aceite Girasol 1L',
            presentation: '1L',
            price: 6.50,
            sku: 'CP005-1L',
            barcode: '7501122334455',
          ),
        ],
      ),
    ];
  }

  // Inventario Mock
  static List<InventoryItem> getMockInventory() {
    return [
      InventoryItem(
        id: 'inv1',
        productId: '1',
        variantId: 'v1',
        productName: 'Coca Cola',
        variantName: 'Coca Cola 350ml',
        presentation: '350ml',
        sku: 'CC001-350',
        warehouseId: 'w1',
        warehouseName: 'Almacén Principal',
        location: 'A-01-01',
        currentStock: 150,
        minStock: 50,
        maxStock: 500,
        unitCost: 1.80,
        abcClassification: 'A',
        lastMovement: DateTime.now().subtract(const Duration(hours: 2)),
        needsRestock: false,
      ),
      InventoryItem(
        id: 'inv2',
        productId: '1',
        variantId: 'v2',
        productName: 'Coca Cola',
        variantName: 'Coca Cola 500ml',
        presentation: '500ml',
        sku: 'CC001-500',
        warehouseId: 'w1',
        warehouseName: 'Almacén Principal',
        location: 'A-01-02',
        currentStock: 25,
        minStock: 30,
        maxStock: 300,
        unitCost: 2.20,
        abcClassification: 'A',
        lastMovement: DateTime.now().subtract(const Duration(hours: 5)),
        needsRestock: true,
      ),
      InventoryItem(
        id: 'inv3',
        productId: '2',
        variantId: 'v4',
        productName: 'Pan Integral',
        variantName: 'Pan Integral 680g',
        presentation: '680g',
        sku: 'BI002-680',
        warehouseId: 'w1',
        warehouseName: 'Almacén Principal',
        location: 'B-02-01',
        currentStock: 80,
        minStock: 20,
        maxStock: 200,
        unitCost: 2.50,
        abcClassification: 'B',
        lastMovement: DateTime.now().subtract(const Duration(hours: 1)),
        needsRestock: false,
      ),
      InventoryItem(
        id: 'inv4',
        productId: '3',
        variantId: 'v5',
        productName: 'Leche Entera',
        variantName: 'Leche Entera 1L',
        presentation: '1L',
        sku: 'AL003-1L',
        warehouseId: 'w1',
        warehouseName: 'Almacén Principal',
        location: 'C-01-01',
        currentStock: 45,
        minStock: 25,
        maxStock: 150,
        unitCost: 2.10,
        abcClassification: 'A',
        lastMovement: DateTime.now().subtract(const Duration(minutes: 30)),
        needsRestock: false,
      ),
      InventoryItem(
        id: 'inv5',
        productId: '4',
        variantId: 'v7',
        productName: 'Arroz Blanco',
        variantName: 'Arroz Blanco 1kg',
        presentation: '1kg',
        sku: 'VV004-1K',
        warehouseId: 'w2',
        warehouseName: 'Almacén Secundario',
        location: 'D-01-01',
        currentStock: 200,
        minStock: 100,
        maxStock: 1000,
        unitCost: 3.50,
        abcClassification: 'B',
        lastMovement: DateTime.now().subtract(const Duration(days: 1)),
        needsRestock: false,
      ),
    ];
  }

  // Almacenes Mock
  static List<Warehouse> getMockWarehouses() {
    return [
      Warehouse(
        id: 'w1',
        name: 'Almacén Principal',
        description: 'Almacén central de distribución',
        address: 'Av. Industrial 123',
        city: 'Ciudad de México',
        country: 'México',
        latitude: 19.4326,
        longitude: -99.1332,
        type: 'principal',
        createdAt: DateTime.now().subtract(const Duration(days: 365)),
        zones: [
          WarehouseZone(
            id: 'z1',
            warehouseId: 'w1',
            name: 'Zona A - Bebidas',
            code: 'A',
            type: 'almacenamiento',
            conditions: 'Temperatura ambiente, seco',
            capacity: 1000,
            currentOccupancy: 650,
            locations: ['A-01-01', 'A-01-02', 'A-02-01', 'A-02-02'],
          ),
          WarehouseZone(
            id: 'z2',
            warehouseId: 'w1',
            name: 'Zona B - Panadería',
            code: 'B',
            type: 'almacenamiento',
            conditions: 'Temperatura controlada 18-22°C',
            capacity: 500,
            currentOccupancy: 320,
            locations: ['B-01-01', 'B-01-02', 'B-02-01'],
          ),
        ],
      ),
      Warehouse(
        id: 'w2',
        name: 'Almacén Secundario',
        description: 'Almacén de productos secos',
        address: 'Calle Comercio 456',
        city: 'Guadalajara',
        country: 'México',
        type: 'secundario',
        createdAt: DateTime.now().subtract(const Duration(days: 180)),
        zones: [
          WarehouseZone(
            id: 'z3',
            warehouseId: 'w2',
            name: 'Zona D - Granos',
            code: 'D',
            type: 'almacenamiento',
            conditions: 'Seco, ventilado',
            capacity: 2000,
            currentOccupancy: 1200,
            locations: ['D-01-01', 'D-01-02', 'D-02-01', 'D-02-02', 'D-03-01'],
          ),
        ],
      ),
    ];
  }

  // Método para obtener datos mock de tiendas
  static List<Store> getMockStores() {
    return [
      Store(
        id: '1',
        name: 'VentIQ Centro',
        address: 'Av. Providencia 1234, Santiago',
        phone: '+56 2 2345 6789',
        email: 'centro@ventiq.cl',
        manager: 'Carlos Rodríguez',
        isActive: true,
        timezone: 'America/Santiago',
        businessHours: {
          'monday': '09:00-20:00',
          'tuesday': '09:00-20:00',
          'wednesday': '09:00-20:00',
          'thursday': '09:00-20:00',
          'friday': '09:00-21:00',
          'saturday': '10:00-19:00',
          'sunday': '11:00-18:00',
        },
        latitude: -33.4489,
        longitude: -70.6693,
        currency: 'CLP',
        taxId: '76.123.456-7',
        createdAt: DateTime.now().subtract(const Duration(days: 365)),
      ),
      Store(
        id: '2',
        name: 'VentIQ Las Condes',
        address: 'Av. Apoquindo 4567, Las Condes',
        phone: '+56 2 2876 5432',
        email: 'lascondes@ventiq.cl',
        manager: 'María González',
        isActive: true,
        timezone: 'America/Santiago',
        businessHours: {
          'monday': '10:00-21:00',
          'tuesday': '10:00-21:00',
          'wednesday': '10:00-21:00',
          'thursday': '10:00-21:00',
          'friday': '10:00-22:00',
          'saturday': '10:00-20:00',
          'sunday': '12:00-19:00',
        },
        latitude: -33.4172,
        longitude: -70.6036,
        currency: 'CLP',
        taxId: '76.234.567-8',
        createdAt: DateTime.now().subtract(const Duration(days: 180)),
      ),
      Store(
        id: '3',
        name: 'VentIQ Maipú',
        address: 'Av. Pajaritos 1890, Maipú',
        phone: '+56 2 2654 3210',
        email: 'maipu@ventiq.cl',
        manager: 'Pedro Morales',
        isActive: false,
        timezone: 'America/Santiago',
        businessHours: {
          'monday': '09:30-19:30',
          'tuesday': '09:30-19:30',
          'wednesday': '09:30-19:30',
          'thursday': '09:30-19:30',
          'friday': '09:30-20:30',
          'saturday': '10:00-18:00',
          'sunday': 'Cerrado',
        },
        latitude: -33.5110,
        longitude: -70.7580,
        currency: 'CLP',
        taxId: '76.345.678-9',
        createdAt: DateTime.now().subtract(const Duration(days: 90)),
      ),
    ];
  }

  // Método para obtener datos mock de parámetros del sistema
  static List<SystemParameter> getMockSystemParameters() {
    return [
      SystemParameter(
        id: '1',
        key: 'tax_rate',
        name: 'Tasa de IVA',
        description: 'Tasa de impuesto al valor agregado aplicable',
        value: '19',
        type: 'number',
        category: 'fiscal',
        isEditable: true,
        isRequired: true,
        validationRule: 'min:0,max:100',
        createdAt: DateTime.now().subtract(const Duration(days: 365)),
      ),
      SystemParameter(
        id: '2',
        key: 'currency_symbol',
        name: 'Símbolo de Moneda',
        description: 'Símbolo de la moneda local',
        value: '\$',
        type: 'string',
        category: 'general',
        isEditable: true,
        isRequired: true,
        createdAt: DateTime.now().subtract(const Duration(days: 365)),
      ),
      SystemParameter(
        id: '3',
        key: 'low_stock_threshold',
        name: 'Umbral Stock Bajo',
        description: 'Cantidad mínima para alertas de stock bajo',
        value: '10',
        type: 'number',
        category: 'inventory',
        isEditable: true,
        isRequired: true,
        validationRule: 'min:1',
        createdAt: DateTime.now().subtract(const Duration(days: 300)),
      ),
      SystemParameter(
        id: '4',
        key: 'backup_frequency',
        name: 'Frecuencia de Respaldo',
        description: 'Frecuencia automática de respaldos (horas)',
        value: '24',
        type: 'number',
        category: 'system',
        isEditable: true,
        isRequired: true,
        validationRule: 'min:1,max:168',
        createdAt: DateTime.now().subtract(const Duration(days: 200)),
      ),
      SystemParameter(
        id: '5',
        key: 'session_timeout',
        name: 'Tiempo de Sesión',
        description: 'Tiempo límite de sesión inactiva (minutos)',
        value: '30',
        type: 'number',
        category: 'security',
        isEditable: true,
        isRequired: true,
        validationRule: 'min:5,max:480',
        createdAt: DateTime.now().subtract(const Duration(days: 150)),
      ),
      SystemParameter(
        id: '6',
        key: 'enable_notifications',
        name: 'Habilitar Notificaciones',
        description: 'Activar notificaciones push del sistema',
        value: 'true',
        type: 'boolean',
        category: 'general',
        isEditable: true,
        isRequired: false,
        createdAt: DateTime.now().subtract(const Duration(days: 100)),
      ),
    ];
  }

  // Método para obtener datos mock de integraciones
  static List<Integration> getMockIntegrations() {
    return [
      Integration(
        id: '1',
        name: 'Transbank WebPay',
        type: 'payment',
        provider: 'Transbank',
        description: 'Procesamiento de pagos con tarjetas de crédito y débito',
        isActive: true,
        isConfigured: true,
        config: {
          'environment': 'production',
          'timeout': '30',
          'retries': '3',
        },
        credentials: {
          'api_key': '***hidden***',
          'secret_key': '***hidden***',
        },
        status: 'connected',
        lastSync: DateTime.now().subtract(const Duration(minutes: 15)),
        createdAt: DateTime.now().subtract(const Duration(days: 200)),
      ),
      Integration(
        id: '2',
        name: 'Chilexpress API',
        type: 'shipping',
        provider: 'Chilexpress',
        description: 'Servicio de envíos y tracking de paquetes',
        isActive: true,
        isConfigured: true,
        config: {
          'region': 'RM',
          'default_service': 'express',
        },
        credentials: {
          'api_token': '***hidden***',
        },
        status: 'connected',
        lastSync: DateTime.now().subtract(const Duration(hours: 2)),
        createdAt: DateTime.now().subtract(const Duration(days: 150)),
      ),
      Integration(
        id: '3',
        name: 'Contabilidad ERP',
        type: 'accounting',
        provider: 'Custom ERP',
        description: 'Sincronización con sistema contable empresarial',
        isActive: false,
        isConfigured: false,
        config: {},
        credentials: {},
        status: 'disconnected',
        createdAt: DateTime.now().subtract(const Duration(days: 100)),
      ),
      Integration(
        id: '4',
        name: 'WhatsApp Business',
        type: 'crm',
        provider: 'Meta',
        description: 'Comunicación automática con clientes vía WhatsApp',
        isActive: true,
        isConfigured: true,
        config: {
          'webhook_url': 'https://api.ventiq.cl/webhook/whatsapp',
          'auto_reply': 'true',
        },
        credentials: {
          'phone_number_id': '***hidden***',
          'access_token': '***hidden***',
        },
        status: 'connected',
        lastSync: DateTime.now().subtract(const Duration(minutes: 5)),
        createdAt: DateTime.now().subtract(const Duration(days: 80)),
      ),
      Integration(
        id: '5',
        name: 'Mercado Libre',
        type: 'inventory',
        provider: 'MercadoLibre',
        description: 'Sincronización de inventario con marketplace',
        isActive: true,
        isConfigured: true,
        config: {
          'sync_frequency': 'hourly',
          'auto_publish': 'false',
        },
        credentials: {
          'client_id': '***hidden***',
          'client_secret': '***hidden***',
        },
        status: 'error',
        lastError: 'API rate limit exceeded',
        lastSync: DateTime.now().subtract(const Duration(hours: 6)),
        createdAt: DateTime.now().subtract(const Duration(days: 60)),
      ),
    ];
  }
}
