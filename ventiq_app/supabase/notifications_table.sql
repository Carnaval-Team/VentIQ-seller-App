-- =====================================================
-- TABLA DE NOTIFICACIONES PARA VENTIQ
-- =====================================================
-- Esta tabla almacena notificaciones para usuarios específicos
-- Soporta realtime para actualizaciones en tiempo real
-- =====================================================

-- Crear tabla de notificaciones
CREATE TABLE IF NOT EXISTS public.app_dat_notificaciones (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  
  -- Usuario destinatario (UUID de auth.users)
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  
  -- Tipo de notificación
  tipo VARCHAR(50) NOT NULL CHECK (tipo IN ('alerta', 'info', 'warning', 'success', 'error', 'promocion', 'sistema', 'pedido', 'inventario', 'venta')),
  
  -- Título de la notificación
  titulo VARCHAR(255) NOT NULL,
  
  -- Mensaje/contenido de la notificación
  mensaje TEXT NOT NULL,
  
  -- Datos adicionales en formato JSON (opcional)
  data JSONB DEFAULT '{}'::jsonb,
  
  -- Prioridad de la notificación
  prioridad VARCHAR(20) DEFAULT 'normal' CHECK (prioridad IN ('baja', 'normal', 'alta', 'urgente')),
  
  -- Estado de la notificación
  leida BOOLEAN DEFAULT FALSE,
  archivada BOOLEAN DEFAULT FALSE,
  
  -- Acción asociada (opcional) - puede ser una ruta o acción específica
  accion VARCHAR(255),
  
  -- Icono personalizado (opcional)
  icono VARCHAR(50),
  
  -- Color personalizado (opcional) - formato hex
  color VARCHAR(7),
  
  -- Fecha de expiración (opcional)
  fecha_expiracion TIMESTAMP WITH TIME ZONE,
  
  -- Metadatos
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  leida_at TIMESTAMP WITH TIME ZONE,
  
  -- Índices para mejorar rendimiento
  CONSTRAINT valid_color CHECK (color IS NULL OR color ~ '^#[0-9A-Fa-f]{6}$')
);

-- =====================================================
-- ÍNDICES PARA OPTIMIZAR CONSULTAS
-- =====================================================

-- Índice para consultas por usuario
CREATE INDEX IF NOT EXISTS idx_notificaciones_user_id 
ON public.app_dat_notificaciones(user_id);

-- Índice para consultas por usuario y estado de lectura
CREATE INDEX IF NOT EXISTS idx_notificaciones_user_leida 
ON public.app_dat_notificaciones(user_id, leida);

-- Índice para consultas por usuario y tipo
CREATE INDEX IF NOT EXISTS idx_notificaciones_user_tipo 
ON public.app_dat_notificaciones(user_id, tipo);

-- Índice para consultas por fecha de creación
CREATE INDEX IF NOT EXISTS idx_notificaciones_created_at 
ON public.app_dat_notificaciones(created_at DESC);

-- Índice compuesto para consultas comunes
CREATE INDEX IF NOT EXISTS idx_notificaciones_user_leida_created 
ON public.app_dat_notificaciones(user_id, leida, created_at DESC);

-- =====================================================
-- TRIGGER PARA ACTUALIZAR updated_at
-- =====================================================

CREATE OR REPLACE FUNCTION update_notificaciones_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  
  -- Si se marca como leída, actualizar leida_at
  IF NEW.leida = TRUE AND OLD.leida = FALSE THEN
    NEW.leida_at = NOW();
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_notificaciones_updated_at
  BEFORE UPDATE ON public.app_dat_notificaciones
  FOR EACH ROW
  EXECUTE FUNCTION update_notificaciones_updated_at();

-- =====================================================
-- HABILITAR REALTIME
-- =====================================================

-- Habilitar realtime para la tabla
ALTER PUBLICATION supabase_realtime ADD TABLE public.app_dat_notificaciones;

-- =====================================================
-- ROW LEVEL SECURITY (RLS)
-- =====================================================

-- Habilitar RLS
ALTER TABLE public.app_dat_notificaciones ENABLE ROW LEVEL SECURITY;

-- Política: Los usuarios solo pueden ver sus propias notificaciones
CREATE POLICY "Los usuarios pueden ver sus propias notificaciones"
ON public.app_dat_notificaciones
FOR SELECT
USING (auth.uid() = user_id);

-- Política: Los usuarios pueden actualizar sus propias notificaciones (marcar como leída, archivar)
CREATE POLICY "Los usuarios pueden actualizar sus propias notificaciones"
ON public.app_dat_notificaciones
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Política: Solo administradores pueden insertar notificaciones
-- (Ajustar según tu sistema de roles)
CREATE POLICY "Administradores pueden insertar notificaciones"
ON public.app_dat_notificaciones
FOR INSERT
WITH CHECK (
  -- Permitir si el usuario tiene rol de administrador o sistema
  EXISTS (
    SELECT 1 FROM auth.users
    WHERE id = auth.uid()
    AND raw_user_meta_data->>'role' IN ('admin', 'sistema', 'gerente', 'supervisor')
  )
  OR
  -- O si es el propio usuario (auto-notificaciones)
  auth.uid() = user_id
);

-- Política: Los usuarios pueden eliminar sus propias notificaciones
CREATE POLICY "Los usuarios pueden eliminar sus propias notificaciones"
ON public.app_dat_notificaciones
FOR DELETE
USING (auth.uid() = user_id);

-- =====================================================
-- FUNCIÓN PARA CREAR NOTIFICACIONES
-- =====================================================

CREATE OR REPLACE FUNCTION fn_crear_notificacion(
  p_user_id UUID,
  p_tipo VARCHAR,
  p_titulo VARCHAR,
  p_mensaje TEXT,
  p_data JSONB DEFAULT '{}'::jsonb,
  p_prioridad VARCHAR DEFAULT 'normal',
  p_accion VARCHAR DEFAULT NULL,
  p_icono VARCHAR DEFAULT NULL,
  p_color VARCHAR DEFAULT NULL,
  p_fecha_expiracion TIMESTAMP WITH TIME ZONE DEFAULT NULL
)
RETURNS JSONB AS $$
DECLARE
  v_notificacion_id BIGINT;
BEGIN
  -- Insertar notificación
  INSERT INTO public.app_dat_notificaciones (
    user_id,
    tipo,
    titulo,
    mensaje,
    data,
    prioridad,
    accion,
    icono,
    color,
    fecha_expiracion
  ) VALUES (
    p_user_id,
    p_tipo,
    p_titulo,
    p_mensaje,
    p_data,
    p_prioridad,
    p_accion,
    p_icono,
    p_color,
    p_fecha_expiracion
  )
  RETURNING id INTO v_notificacion_id;
  
  RETURN jsonb_build_object(
    'success', true,
    'message', 'Notificación creada exitosamente',
    'notificacion_id', v_notificacion_id
  );
  
EXCEPTION WHEN OTHERS THEN
  RETURN jsonb_build_object(
    'success', false,
    'error', SQLERRM,
    'message', 'Error al crear notificación'
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- FUNCIÓN PARA MARCAR NOTIFICACIÓN COMO LEÍDA
-- =====================================================

CREATE OR REPLACE FUNCTION fn_marcar_notificacion_leida(
  p_notificacion_id BIGINT
)
RETURNS JSONB AS $$
BEGIN
  UPDATE public.app_dat_notificaciones
  SET leida = TRUE
  WHERE id = p_notificacion_id
  AND user_id = auth.uid();
  
  IF FOUND THEN
    RETURN jsonb_build_object(
      'success', true,
      'message', 'Notificación marcada como leída'
    );
  ELSE
    RETURN jsonb_build_object(
      'success', false,
      'message', 'Notificación no encontrada o sin permisos'
    );
  END IF;
  
EXCEPTION WHEN OTHERS THEN
  RETURN jsonb_build_object(
    'success', false,
    'error', SQLERRM
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- FUNCIÓN PARA MARCAR TODAS LAS NOTIFICACIONES COMO LEÍDAS
-- =====================================================

CREATE OR REPLACE FUNCTION fn_marcar_todas_notificaciones_leidas()
RETURNS JSONB AS $$
DECLARE
  v_count INTEGER;
BEGIN
  UPDATE public.app_dat_notificaciones
  SET leida = TRUE
  WHERE user_id = auth.uid()
  AND leida = FALSE;
  
  GET DIAGNOSTICS v_count = ROW_COUNT;
  
  RETURN jsonb_build_object(
    'success', true,
    'message', 'Notificaciones marcadas como leídas',
    'count', v_count
  );
  
EXCEPTION WHEN OTHERS THEN
  RETURN jsonb_build_object(
    'success', false,
    'error', SQLERRM
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- FUNCIÓN PARA OBTENER NOTIFICACIONES DEL USUARIO
-- =====================================================

CREATE OR REPLACE FUNCTION fn_obtener_notificaciones(
  p_limit INTEGER DEFAULT 50,
  p_offset INTEGER DEFAULT 0,
  p_solo_no_leidas BOOLEAN DEFAULT FALSE
)
RETURNS JSONB AS $$
DECLARE
  v_notificaciones JSONB;
  v_total_count INTEGER;
  v_no_leidas_count INTEGER;
BEGIN
  -- Contar total de notificaciones
  SELECT COUNT(*)
  INTO v_total_count
  FROM public.app_dat_notificaciones
  WHERE user_id = auth.uid()
  AND archivada = FALSE
  AND (fecha_expiracion IS NULL OR fecha_expiracion > NOW());
  
  -- Contar notificaciones no leídas
  SELECT COUNT(*)
  INTO v_no_leidas_count
  FROM public.app_dat_notificaciones
  WHERE user_id = auth.uid()
  AND leida = FALSE
  AND archivada = FALSE
  AND (fecha_expiracion IS NULL OR fecha_expiracion > NOW());
  
  -- Obtener notificaciones
  SELECT jsonb_agg(
    jsonb_build_object(
      'id', id,
      'tipo', tipo,
      'titulo', titulo,
      'mensaje', mensaje,
      'data', data,
      'prioridad', prioridad,
      'leida', leida,
      'archivada', archivada,
      'accion', accion,
      'icono', icono,
      'color', color,
      'fecha_expiracion', fecha_expiracion,
      'created_at', created_at,
      'updated_at', updated_at,
      'leida_at', leida_at
    )
    ORDER BY created_at DESC
  )
  INTO v_notificaciones
  FROM (
    SELECT *
    FROM public.app_dat_notificaciones
    WHERE user_id = auth.uid()
    AND archivada = FALSE
    AND (fecha_expiracion IS NULL OR fecha_expiracion > NOW())
    AND (NOT p_solo_no_leidas OR leida = FALSE)
    ORDER BY created_at DESC
    LIMIT p_limit
    OFFSET p_offset
  ) sub;
  
  RETURN jsonb_build_object(
    'success', true,
    'notificaciones', COALESCE(v_notificaciones, '[]'::jsonb),
    'total_count', v_total_count,
    'no_leidas_count', v_no_leidas_count,
    'limit', p_limit,
    'offset', p_offset
  );
  
EXCEPTION WHEN OTHERS THEN
  RETURN jsonb_build_object(
    'success', false,
    'error', SQLERRM
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- FUNCIÓN PARA LIMPIAR NOTIFICACIONES EXPIRADAS
-- =====================================================

CREATE OR REPLACE FUNCTION fn_limpiar_notificaciones_expiradas()
RETURNS JSONB AS $$
DECLARE
  v_count INTEGER;
BEGIN
  DELETE FROM public.app_dat_notificaciones
  WHERE fecha_expiracion IS NOT NULL
  AND fecha_expiracion < NOW();
  
  GET DIAGNOSTICS v_count = ROW_COUNT;
  
  RETURN jsonb_build_object(
    'success', true,
    'message', 'Notificaciones expiradas eliminadas',
    'count', v_count
  );
  
EXCEPTION WHEN OTHERS THEN
  RETURN jsonb_build_object(
    'success', false,
    'error', SQLERRM
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- COMENTARIOS PARA DOCUMENTACIÓN
-- =====================================================

COMMENT ON TABLE public.app_dat_notificaciones IS 'Tabla de notificaciones para usuarios de VentIQ con soporte realtime';
COMMENT ON COLUMN public.app_dat_notificaciones.user_id IS 'UUID del usuario destinatario (FK a auth.users)';
COMMENT ON COLUMN public.app_dat_notificaciones.tipo IS 'Tipo de notificación: alerta, info, warning, success, error, promocion, sistema, pedido, inventario, venta';
COMMENT ON COLUMN public.app_dat_notificaciones.titulo IS 'Título de la notificación';
COMMENT ON COLUMN public.app_dat_notificaciones.mensaje IS 'Contenido/mensaje de la notificación';
COMMENT ON COLUMN public.app_dat_notificaciones.data IS 'Datos adicionales en formato JSON';
COMMENT ON COLUMN public.app_dat_notificaciones.prioridad IS 'Prioridad: baja, normal, alta, urgente';
COMMENT ON COLUMN public.app_dat_notificaciones.leida IS 'Indica si la notificación ha sido leída';
COMMENT ON COLUMN public.app_dat_notificaciones.archivada IS 'Indica si la notificación ha sido archivada';
COMMENT ON COLUMN public.app_dat_notificaciones.accion IS 'Acción asociada (ruta o comando)';
COMMENT ON COLUMN public.app_dat_notificaciones.icono IS 'Nombre del icono personalizado';
COMMENT ON COLUMN public.app_dat_notificaciones.color IS 'Color personalizado en formato hex';
COMMENT ON COLUMN public.app_dat_notificaciones.fecha_expiracion IS 'Fecha de expiración de la notificación';

-- =====================================================
-- DATOS DE EJEMPLO (OPCIONAL - COMENTAR EN PRODUCCIÓN)
-- =====================================================

/*
-- Ejemplo de inserción de notificación
INSERT INTO public.app_dat_notificaciones (
  user_id,
  tipo,
  titulo,
  mensaje,
  data,
  prioridad,
  icono,
  color
) VALUES (
  'UUID_DEL_USUARIO', -- Reemplazar con UUID real
  'info',
  'Bienvenido a VentIQ',
  'Gracias por usar nuestra aplicación de punto de venta',
  '{"version": "1.0.0"}'::jsonb,
  'normal',
  'info',
  '#2196F3'
);
*/
